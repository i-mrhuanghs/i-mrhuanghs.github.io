<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on HansenHung&#39;s blog</title>
    <link>https://i-mrhuanghs.github.io/tags/python/</link>
    <description>Recent content in Python on HansenHung&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Aug 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://i-mrhuanghs.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>时间复杂度和空间复杂度</title>
      <link>https://i-mrhuanghs.github.io/post/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</link>
      <pubDate>Sun, 12 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://i-mrhuanghs.github.io/post/%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%92%8C%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</guid>
      <description>在学习具体的数据结构和算法之前，每一位初学者都要掌握一个技能，即善于运用时间复杂度和空间复杂度来衡量一个算法的运行效率。
所谓算法，即解决问题的方法。同一个问题，使用不同的算法，虽然得到的结果相同，但耗费的时间和资源肯定有所差异。就比如拧一个螺母，扳手和钳子都可以胜任，但使用钳子拧螺母肯定没有扳手的效率高。
 图 1 解决问题的方式有多种
这也就意味着，如果解决问题的算法有多种，我们就需要从中选出最好的那一个。那么，怎么判断哪个算法更好（或者更优）呢？
“好”算法的标准 解决一个问题的方法可能有很多，但能称得上算法的，首先它必须能彻底解决这个问题（称为准确性），且根据其编写出的程序在任何情况下都不能崩溃（称为健壮性）。
 注意，程序和算法是完全不同的概念。算法是解决某个问题的想法、思路；而程序是在根据算法编写出来的真正可以运行的代码。例如，要依次输出一维数组中的数据元素的值，首先想到的是使用循环结构，在这个算法的基础上，我们才开始编写程序。
 在满足准确性和健壮性的基础上，还有一个重要的筛选条件，即通过算法所编写出的程序的运行效率。程序的运行效率具体可以从 2 个方面衡量，分别为：
 程序的运行时间。 程序运行所需内存空间的大小。  根据算法编写出的程序，运行时间更短，运行期间占用的内存更少，该算法的运行效率就更高，算法也就更好。
那么，如何衡量一个算法所编写出程序的运行效率呢？数据结构中，用时间复杂度来衡量程序运行时间的多少；用空间复杂度来衡量程序运行所需内存空间的大小。
时间复杂度 判断一个算法所编程序运行时间的多少，并不是将程序编写出来，通过在计算机上运行所消耗的时间来度量。原因很简单，一方面，解决一个问题的算法可能有很多种，一一实现的工作量无疑是巨大的，得不偿失；另一方面，不同计算机的软、硬件环境不同，即便使用同一台计算机，不同时间段其系统环境也不相同，程序的运行时间很可能会受影响，严重时甚至会导致误判。
实际场景中，我们更喜欢用一个估值来表示算法所编程序的运行时间。所谓估值，即估计的、并不准确的值。注意，虽然估值无法准确的表示算法所编程序的运行时间，但它的得来并非凭空揣测，需要经过缜密的计算后才能得出。
也就是说，表示一个算法所编程序运行时间的多少，用的并不是准确值（事实上也无法得出），而是根据合理方法得到的预估值。
那么，如何预估一个算法所编程序的运行时间呢？很简单，先分别计算程序中每条语句的执行次数，然后用总的执行次数间接表示程序的运行时间。
以一段简单的 python 语言程序为例，预估出此段程序的运行时间：
for i in range(n): # &amp;lt;- 从 0 到 n-1，执行 n 次 print(i) # &amp;lt;- 从 0 到 n-1，执行 n 次 可以看到，这段程序中仅有 2 行代码，其中：
 for 循环从 i 的值为 0 一直逐增至 n（注意，循环退出的时候 i 值为 n），因此 for 循环语句执行了 n 次； 而循环内部仅有一条语句，print(i) 从 i 的值为 0 就开始执行，每遍历一个值该语句就执行一次，一直到 i 的值为 n-1，因此，print(i)语句一共执行了 n 次。  因此，整段代码中所有语句共执行了 n+n 次，即 2n 次。数据结构中，每条语句的执行次数，又被称为该语句的频度。整段代码的总执行次数，即整段代码的频度。</description>
    </item>
    
    <item>
      <title>list[] 和 list[:]的区别</title>
      <link>https://i-mrhuanghs.github.io/post/list%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Sat, 11 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://i-mrhuanghs.github.io/post/list%E6%B7%B1%E6%B5%85%E6%8B%B7%E8%B4%9D%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>list[] 和 list[:] 的理解 　list“赋值”时会用到list2 = list1 或者 list2[:] = list1，前者两个名字指向同一个对象，后者两个名字指向不同对象。理解如下：
　首先，python中没有赋值的说法，只有名称到对象的引用；
　list2 = list1是把list1所指的对象绑定到名字list2上，没有产生新list，只是新增了一个引用；
　正因为两个名称指向的同一个对象，所以修改list1，那么list2也会改变；
　通俗理解：以前有一套三室一厅的房子，户主叫list1。后来list1和list2结婚，房产证上户主的名字加了一个，但房子还是只有一套。list1如果把客厅刷成了蓝色，那list2回家的时候会发现客厅是蓝色的了。
　而list2 = list1[:]则是把list1通过切片运算取得的新list对象绑定到list2上，产生了新list，名称和引用也不同，所以，修改其中一个，另一个不会变。
　注意，这里的切片是浅拷贝，参考下面的笔记。
　通俗理解：从前有一套三室一厅的房子，户主叫list1。后来有个叫list2的，觉得list1的房子不错，于是买了一套相同户型的，也装修得一模一样。后来list1把自己的客厅刷成了蓝色，list2回家发现自己家的客厅还是白色，并没有变成蓝色。
浅拷贝（shallow copy） 　浅拷贝会创建新对象，其内容是原对象的引用。
　浅拷贝有三种形式：切片操作，工厂函数，copy模块中的copy函数。
　比如对：a = [1,2,3,&amp;ldquo;hello&amp;rdquo;,[&amp;ldquo;python&amp;rdquo;,&amp;ldquo;C++&amp;quot;]]
　1、切片操作：b = a[:] 或者 b = [each for each in a]
　2、工厂函数：b = list(a)
　3、copy函数：b = copy.copy(a)
　浅拷贝产生的b不再是a了，使用is可以发现他们不是同一个对象，使用id查看，发现它们也不指向同一片内存。但是当我们使用 id(x) for x in a 和 id(x) for x in b 时，可以看到二者包含的元素的地址是相同的。</description>
    </item>
    
    <item>
      <title>nginx uwsgi wsgi django 这些东西究竟是什么关系</title>
      <link>https://i-mrhuanghs.github.io/post/nginx_uwsgi_wsgi_django%E7%9A%84%E5%85%B3%E7%B3%BB/</link>
      <pubDate>Mon, 09 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://i-mrhuanghs.github.io/post/nginx_uwsgi_wsgi_django%E7%9A%84%E5%85%B3%E7%B3%BB/</guid>
      <description>有太多的文章告诉我们nginx uwsgi django 这些东西怎么用了，太多的人知道这些东西的怎么使用，怎么配置，怎么优化，但是还是有一部分人比如我这种水货不知道这些东西到底是啥，为啥一个项目的发布要经过这么多层级，他们每一层都做了什么，都是必须的吗
1、首先nginx 是对外的服务接口，外部浏览器通过url访问nginx,
2、nginx 接收到浏览器发送过来的http请求，将包进行解析，分析url，如果是静态文件请求就直接访问用户给nginx配置的静态文件目录，直接返回用户请求的静态文件，
如果不是静态文件，而是一个动态的请求，那么nginx就将请求转发给uwsgi,uwsgi 接收到请求之后将包进行处理，处理成wsgi可以接受的格式，并发给wsgi,wsgi 根据请求调用应用程序的某个文件，某个文件的某个函数，最后处理完将返回值再次交给wsgi,wsgi将返回值进行打包，打包成uwsgi能够接收的格式，uwsgi接收wsgi 发送的请求，并转发给nginx,nginx最终将返回值返回给浏览器。
3、要知道第一级的nginx并不是必须的，uwsgi完全可以完成整个的和浏览器交互的流程，但是要考虑到某些情况
3.1 安全问题，程序不能直接被浏览器访问到，而是通过nginx,nginx只开放某个接口，uwsgi本身是内网接口，这样运维人员在nginx上加上安全性的限制，可以达到保护程序的作用。
3.2负载均衡问题，一个uwsgi很可能不够用，即使开了多个work也是不行，毕竟一台机器的cpu和内存都是有限的，有了nginx做代理，一个nginx可以代理多台uwsgi完成uwsgi的负载均衡。
3。3静态文件问题，用django或是uwsgi这种东西来负责静态文件的处理是很浪费的行为，而且他们本身对文件的处理也不如nginx好，所以整个静态文件的处理都直接由nginx完成，静态文件的访问完全不去经过uwsgi以及其后面的东西。
这就是这几者之间的关系。 ———————————————— 原文链接：https://blog.csdn.net/u014761344/article/details/40146597</description>
    </item>
    
    <item>
      <title>Django的异常处理</title>
      <link>https://i-mrhuanghs.github.io/post/django%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
      <pubDate>Thu, 05 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://i-mrhuanghs.github.io/post/django%E7%9A%84%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid>
      <description></description>
    </item>
    
    <item>
      <title>为emi生产report文件</title>
      <link>https://i-mrhuanghs.github.io/post/%E4%B8%BAemi%E7%94%9F%E4%BA%A7report%E6%96%87%E4%BB%B6/</link>
      <pubDate>Mon, 18 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://i-mrhuanghs.github.io/post/%E4%B8%BAemi%E7%94%9F%E4%BA%A7report%E6%96%87%E4%BB%B6/</guid>
      <description>Report 来源问题
1、Account账号（Iban） 公司中 Application&amp;amp;Business 2、受益人（公司受益人） 数据问题
1、数据重复问题 --&amp;gt;受益人删除 删除之前的已经上传的受益人 2、RefId 因为有两个不同的公司表，所以会有相同的id，refid是根据表id生成的，所以会有	相同的refid，所以要对refid进行改动 3、NR ANKSxx_NR 因为发送过去的事增量，所以根据上一个增量文件NR&amp;amp;ANKSxx_NR自+1 4、补全countrycode + Add（address） </description>
    </item>
    
    <item>
      <title>Django 流式响应中文csv样例</title>
      <link>https://i-mrhuanghs.github.io/post/django%E6%B5%81%E5%BC%8F%E5%93%8D%E5%BA%94csv%E6%A0%B7%E4%BE%8B/</link>
      <pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://i-mrhuanghs.github.io/post/django%E6%B5%81%E5%BC%8F%E5%93%8D%E5%BA%94csv%E6%A0%B7%E4%BE%8B/</guid>
      <description>在Django里，流式响应StreamingHttpResponse是个好东西,可以快速、节省内存地产生一个大型文件。
目前项目里用于流式响应的一个是Eventsource，用于改善跨系统通讯时用户产生的慢速的感觉。这个不细说了。
还有一个就是生成一个大的csv文件。
当Django进程处于gunicorn或者uwsgi等web容器中时，如果响应超过一定时间没有返回，就会被web容器终止掉，虽然我们可以通过加长web容器的超时时间来绕过这个问题，但是毕竟还是治标不治本。要根本上解决这个问题，Python的生成器、Django框架提供的StreamingHttpResponse这个流式响应很有帮助
而在csv中，中文的处理也至关重要，要保证用excel打开csv不乱码什么的。。为了节约空间，我就把所有代码贴到一起了。。实际使用按照项目的规划放置哈
上代码：
from __future__ import absolute_import import csv import codecs import cStringIO class Echo(object): def write(self, value): return value class UnicodeWriter: &amp;#34;&amp;#34;&amp;#34; A CSV writer which will write rows to CSV file &amp;#34;f&amp;#34;, which is encoded in the given encoding. &amp;#34;&amp;#34;&amp;#34; def __init__(self, f, dialect=csv.excel, encoding=&amp;#34;utf-8&amp;#34;, **kwds): # Redirect output to a queue self.queue = cStringIO.StringIO() self.writer = csv.writer(self.queue, dialect=dialect, **kwds) self.stream = f self.encoder = codecs.</description>
    </item>
    
    <item>
      <title>谈谈Nginx、uWSGI、django之间的联系</title>
      <link>https://i-mrhuanghs.github.io/post/%E8%B0%88%E8%B0%88nginxuwsgidjango%E4%B9%8B%E9%97%B4%E7%9A%84%E8%81%94%E7%B3%BB/</link>
      <pubDate>Mon, 04 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://i-mrhuanghs.github.io/post/%E8%B0%88%E8%B0%88nginxuwsgidjango%E4%B9%8B%E9%97%B4%E7%9A%84%E8%81%94%E7%B3%BB/</guid>
      <description>Nginx：一个高性能的HTTP和反向代理服务器，占有内存少，并发能力强。uWSGI：一个Web服务器，实现了WSGI协议、uwsgi、httpd等协议。 WSGI：一种Web服务器网关接口
注意与uwsgi区别，uwsgi是一种线路协议而不是通信协议，常用于在uWSGI服务器与其他网络服务器的数据通信。
django项目上线的流程：
 1、首先客户端请求服务资源， 2、nginx作为直接对外的服务接口,接收到客户端发送过来的http请求,会解包、分析， 3、如果是静态文件请求就根据nginx配置的静态文件目录，返回请求的资源， 4、如果是动态的请求,nginx就通过配置文件,将请求传递给uWSGI；uWSGI 将接收到的包进行处理，并转发给wsgi， 5、wsgi根据请求调用django工程的某个文件或函数，处理完后django将返回值交给wsgi， 6、wsgi将返回值进行打包，转发给uWSGI， 7、uWSGI接收后转发给nginx,nginx最终将返回值返回给客户端(如浏览器)。 </description>
    </item>
    
  </channel>
</rss>
